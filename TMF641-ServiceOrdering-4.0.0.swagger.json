{
    "swagger": "2.0", 
    "info": {
        "title": "IRH API ServiceOrdering", 
        "description": "## TMF API Reference : TMF 641 - Service Ordering Management\n\n## Release : 18.5 - Dec 2018\n\nThe Service Order API provides a standardized mechanism for managing Service Order, a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa.\n\n### Service Order resource\nA service order will describe a list of service order items.  A service order item references an action on an existing  or  future  service.  By  service  we  designed  Customer Facing  Service  (CFS)  as  well  as  Resource Facing Service (RFS).\nFrom a component perspective, a service order should be available\n- from a Service Orchestration Component (and it could mix CFS and RFS)\n- from an Infrastructure Control & Management component (and it would have only RFS)\n\n### Service Order API performs the following operations on service order :\n- Retrieval of a service order or a collection of service orders depending on filter criteria\n- Partial update of a service order (including updating rules)\n- Creation of a service order (including default values and creation rules)\n- Deletion of service order (for administration purposes)\n- Notification of events on Service order\n\nCopyright \u00a9 TM Forum 2018. All Rights Reserved", 
        "version": "4.0.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/serviceOrdering/v4/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json;charset=utf-8"
    ], 
    "produces": [
        "application/json;charset=utf-8"
    ], 
    "tags": [
        {
            "name": "serviceOrder"
        }, 
        {
            "name": "notification listeners (client side)"
        }, 
        {
            "name": "events subscription"
        }
    ], 
    "paths": {
        "/serviceOrder": {
            "get": {
                "operationId": "listServiceOrder", 
                "summary": "List or find ServiceOrder objects", 
                "description": "This operation list or find ServiceOrder entities", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceOrder"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceOrder", 
                "summary": "Creates a ServiceOrder", 
                "description": "This operation creates a ServiceOrder entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceOrder", 
                        "description": "The ServiceOrder to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceOrder/{id}": {
            "get": {
                "operationId": "retrieveServiceOrder", 
                "summary": "Retrieves a ServiceOrder by ID", 
                "description": "This operation retrieves a ServiceOrder entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceOrder"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceOrder", 
                "summary": "Updates partially a ServiceOrder", 
                "description": "This operation updates partially a ServiceOrder entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceOrder"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceOrder", 
                        "description": "The ServiceOrder to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceOrder", 
                "summary": "Deletes a ServiceOrder", 
                "description": "This operation deletes a ServiceOrder entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceOrder"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceOrderCreateNotification": {
            "post": {
                "operationId": "listenToServiceOrderCreateNotification", 
                "summary": "Client listener for entity ServiceOrderCreateNotification", 
                "description": "Example of a client listener for receiving the notification ServiceOrderCreateNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrderCreateNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceOrderAttributeValueChangeNotification": {
            "post": {
                "operationId": "listenToServiceOrderAttributeValueChangeNotification", 
                "summary": "Client listener for entity ServiceOrderAttributeValueChangeNotification", 
                "description": "Example of a client listener for receiving the notification ServiceOrderAttributeValueChangeNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrderAttributeValueChangeNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceOrderStateChangeNotification": {
            "post": {
                "operationId": "listenToServiceOrderStateChangeNotification", 
                "summary": "Client listener for entity ServiceOrderStateChangeNotification", 
                "description": "Example of a client listener for receiving the notification ServiceOrderStateChangeNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrderStateChangeNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceOrderDeleteNotification": {
            "post": {
                "operationId": "listenToServiceOrderDeleteNotification", 
                "summary": "Client listener for entity ServiceOrderDeleteNotification", 
                "description": "Example of a client listener for receiving the notification ServiceOrderDeleteNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrderDeleteNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "Any": {}, 
        "AppointmentRef": {
            "type": "object", 
            "description": "Refers an appointment, such as a Customer presentation or internal meeting or site visit", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of the referred appointment"
                }, 
                "href": {
                    "type": "string", 
                    "description": "The reference of the appointment"
                }, 
                "description": {
                    "type": "string", 
                    "description": "An explanatory text regarding the appointment made with a party"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation"
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "Characteristic": {
            "type": "object", 
            "description": "Describes a given characteristic of an object or entity through a name/value pair.", 
            "required": [
                "name", 
                "value"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the characteristic"
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "Data type of the value of the characteristic"
                }, 
                "value": {
                    "$ref": "#/definitions/Any", 
                    "description": "The value of the characteristic"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Note": {
            "type": "object", 
            "description": "Extra information about a given entity", 
            "properties": {
                "author": {
                    "type": "string", 
                    "description": "Author of the note"
                }, 
                "date": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date of the note"
                }, 
                "system": {
                    "type": "string", 
                    "description": "Describes the system from which the action related to this note was done"
                }, 
                "text": {
                    "type": "string", 
                    "description": "Text of the note"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "description": "Place reference. Place defines the places where the products are sold or delivered.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the place"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the place"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the place, such as: [home delivery], [shop retrieval])"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "RelatedParty": {
            "type": "object", 
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.", 
            "required": [
                "name", 
                "role"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a related party"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the related party, could be a party reference or a party role reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the related party."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ResourceRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the supporting resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the supporting resource"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the resource supporting the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ServiceOrder": {
            "type": "object", 
            "required": [
                "orderItem"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "ID created on repository side"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the order"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
                }, 
                "completionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Effective delivery date amended by the provider"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "expectedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Expected delivery date amended by the provider"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "ID given by the consumer to facilitate searches"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "orderDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "priority": {
                    "type": "string", 
                    "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestors perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the order was started for processing"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process"
                }, 
                "orderItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItem"
                    }, 
                    "minItems": 1, 
                    "description": "A list of service order items to be processed by this order"
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRelationship"
                    }, 
                    "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of parties which are involved in this order and the role they are playing"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceOrderStateType", 
                    "description": "State of the order: described in the state-machine diagram"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrder_Create": {
            "type": "object", 
            "description": "\nSkipped properties: id,href,orderDate,completionDate,expectedCompletionDate,startDate,state", 
            "required": [
                "orderItem"
            ], 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "ID given by the consumer to facilitate searches"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "priority": {
                    "type": "string", 
                    "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestors perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process"
                }, 
                "orderItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItem"
                    }, 
                    "minItems": 1, 
                    "description": "A list of service order items to be processed by this order"
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRelationship"
                    }, 
                    "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of parties which are involved in this order and the role they are playing"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrder_Update": {
            "type": "object", 
            "description": "\nSkipped properties: id,href,externalId,priority,state,orderDate,completionDate,orderItem", 
            "required": [
                "orderItem"
            ], 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "expectedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Expected delivery date amended by the provider"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestors perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the order was started for processing"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process"
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRelationship"
                    }, 
                    "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of parties which are involved in this order and the role they are playing"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrderActionType": {
            "type": "string", 
            "description": "string", 
            "enum": [
                "add", 
                "modify", 
                "delete", 
                "noChange"
            ]
        }, 
        "ServiceOrderItem": {
            "type": "object", 
            "required": [
                "action", 
                "id", 
                "service"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the individual line item"
                }, 
                "action": {
                    "$ref": "#/definitions/ServiceOrderActionType", 
                    "description": "The action to be carried out on the Service. Can be: add, modify, delete, noChange"
                }, 
                "appointment": {
                    "$ref": "#/definitions/AppointmentRef", 
                    "description": "An appointment that was set up with a related party for this order item"
                }, 
                "orderItemRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItemRelationship"
                    }, 
                    "description": "A list of order items related to this order item"
                }, 
                "service": {
                    "$ref": "#/definitions/ServiceRestriction", 
                    "description": "The Service to be acted on by the order item"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceOrderStateType", 
                    "description": "State of the order item: described in the state machine diagram. This is the requested state."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrderItemRelationship": {
            "type": "object", 
            "description": "Linked service order item to the one containing this attribute", 
            "required": [
                "id", 
                "relationshipType"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a service order item"
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "The type of related order item, can be: dependency if the order item needs to be not started until another order item is complete"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrderRelationship": {
            "type": "object", 
            "description": "Linked service order to the one containing this attribute", 
            "required": [
                "id"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The id of the related order"
                }, 
                "href": {
                    "type": "string", 
                    "description": "A hyperlink to the related order"
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "The type of related order, such as: [dependency] if the order needs to be [not started] until another order item is complete (a service order in this case) or [cross-ref] to keep track of the source order (a productOrder)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The entity type of the related order"
                }
            }
        }, 
        "ServiceOrderStateType": {
            "type": "string", 
            "description": "Possible values for the state of the order", 
            "enum": [
                "acknowledged", 
                "rejected", 
                "pending", 
                "held", 
                "inProgress", 
                "cancelled", 
                "completed", 
                "failed", 
                "partial"
            ]
        }, 
        "ServiceRef": {
            "type": "object", 
            "description": "Service reference, for when Service is used by other entities", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "reference of the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ServiceRelationship": {
            "type": "object", 
            "description": "Describes links with services of the same category (useful for bundled services)", 
            "required": [
                "relationshipType", 
                "service"
            ], 
            "properties": {
                "relationshipType": {
                    "type": "string", 
                    "description": "The type of relationship (e.g. depends on, enables)"
                }, 
                "service": {
                    "$ref": "#/definitions/ServiceRef", 
                    "description": "The service being referred to"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceRestriction": {
            "type": "object", 
            "description": "In the context of a service order, and depending of the action requested (add/modify/delete/noChange) this data structure captures the configuration to apply to an existing subscribed service or to a new one", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the service"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Is it a customer facing or resource facing service"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceType": {
                    "type": "string", 
                    "description": "Business type of the service"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                }, 
                "serviceRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    }, 
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The specification from which this service was instantiated"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceStateType", 
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                }, 
                "supportingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                }, 
                "supportingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecificationRef": {
            "type": "object", 
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the serviceSpecification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the requiredServiceSpecification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Service specification version"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema", 
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ServiceStateType": {
            "type": "string", 
            "description": "Valid values for the lifecycle state of the service", 
            "enum": [
                "feasibilityChecked", 
                "designed", 
                "reserved", 
                "inactive", 
                "active", 
                "terminated"
            ]
        }, 
        "TargetServiceSchema": {
            "type": "object", 
            "description": "The reference object to the schema and type of target service which is described by service specification", 
            "required": [
                "@schemaLocation", 
                "@type"
            ], 
            "properties": {
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "This field provides a link to the schema describing the target service"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "Class type of the target service"
                }
            }
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "ServiceOrderCreateNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceOrderCreateEvent"
                }
            }
        }, 
        "ServiceOrderCreateEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceOrder": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceOrder"
                }
            }
        }, 
        "ServiceOrderAttributeValueChangeNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceOrderAttributeValueChangeEvent"
                }
            }
        }, 
        "ServiceOrderAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceOrder": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceOrder"
                }
            }
        }, 
        "ServiceOrderStateChangeNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceOrderStateChangeEvent"
                }
            }
        }, 
        "ServiceOrderStateChangeEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceOrder": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceOrder"
                }
            }
        }, 
        "ServiceOrderDeleteNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceOrderDeleteEvent"
                }
            }
        }, 
        "ServiceOrderDeleteEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceOrder": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceOrder"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "type": "object", 
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)", 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application relevant detail, defined in the API or a common list."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                }, 
                "message": {
                    "type": "string", 
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "HTTP Error code extension"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "URI of documentation describing the error.", 
                    "format": "uri"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
